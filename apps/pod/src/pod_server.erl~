%%% -------------------------------------------------------------------
%%% Author  : joqerlang
%%% Description :
%%% load,start,stop unload applications in the pods vm
%%% supports with services
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(pod_server).  

-behaviour(gen_server). 

%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
-include_lib("kernel/include/logger.hrl").

%% --------------------------------------------------------------------
-define(SERVER,?MODULE).
-define(LogDir,"logs").
%% External exports
-export([
	 load_start_appl/2,
	 stop_unload_appl/2,
	
	 read_state/0,
	 ping/0
	]).


-export([
	 start/0,
	 stop/0
	]).


-export([init/1, handle_call/3,handle_cast/2, handle_info/2, terminate/2, code_change/3]).

-record(state, {
		pod_dir,
		appls
	       }).

%% ====================================================================
%% External functions
%% ====================================================================


%% ====================================================================
%% Server functions
%% ====================================================================
%% Gen server functions

start()-> gen_server:start_link({local, ?SERVER}, ?SERVER, [], []).
stop()-> gen_server:call(?SERVER, {stop},infinity).

%% ====================================================================
%% Application handling
%% ====================================================================
%  create_vm/0, 
%  load_start_appl/3,
%  stop_unload_appl/2,
%  delete_vm/1,

%%---------------------------------------------------------------
%% Function: load_start_appl(ApplId,ApplVsn)
%% @doc: loads and starts App ApplId,ApplVsn on slave Node         
%% @param: ApplId,ApplVsn,Node
%% @returns:ok|{error,Reason}
%%
%%---------------------------------------------------------------
-spec load_start_appl(string(),string())-> ok|{error,term()}.
load_start_appl(ApplId,ApplVsn)->
    gen_server:call(?SERVER, {load_start_appl,ApplId,ApplVsn},infinity).

%%---------------------------------------------------------------
%% Function: stop_unload_appl(ApplId,ApplVsn)
%% @doc: stopps and unloads  App ApplId,ApplVsn       
%% @param: ApplId,ApplVsn,Node
%% @returns:ok|{error,Reason}
%%
%%---------------------------------------------------------------
-spec stop_unload_appl(string(),string())-> ok|{error,term()}.
stop_unload_appl(ApplId,ApplVsn)->
    gen_server:call(?SERVER, {stop_unload_appl,ApplId,ApplVsn},infinity).


%%---------------------------------------------------------------
%% Function: actual_state()
%% @doc: evaluta Id and Vms to start and delete        
%% @param: non
%% @returns:[{Id,ToStart,ToDelete}]
%%
%%---------------------------------------------------------------
-spec actual_state()-> [term()].
actual_state()->
    gen_server:call(?SERVER, {actual_state},infinity).


%%---------------------------------------------------------------
%% Function:template()
%% @doc: service spec template  list of {app,vsn} to run      
%% @param: 
%% @returns:[{app,vsn}]
%%
%%---------------------------------------------------------------
%-spec template()-> [{atom(),string()}].
%template()->
 %   gen_server:call(?SERVER, {template},infinity).


%% ====================================================================
%% Support functions
%
%%---------------------------------------------------------------
%% Function:read_state()
%% @doc: read theServer State variable      
%% @param: non 
%% @returns:State
%%
%%---------------------------------------------------------------
-spec read_state()-> term().
read_state()->
    gen_server:call(?SERVER, {read_state},infinity).
%% 
%% @doc:check if service is running
%% @param: non
%% @returns:{pong,node,module}|{badrpc,Reason}
%%
-spec ping()-> {atom(),node(),module()}|{atom(),term()}.
ping()-> 
    gen_server:call(?SERVER, {ping},infinity).

%% ====================================================================
%% Gen Server functions
%% ====================================================================
%% --------------------------------------------------------------------
%% Function: init/1
%% Description: Initiates the server
%% Returns: {ok, State}          |
%%          {ok, State, Timeout} |
%%          ignore               |
%%          {stop, Reason}
%% --------------------------------------------------------------------
init([]) ->
  
 %   io:format("common ~p~n",[application:start(common)]),
 %   io:format("nodelog ~p~n",[application:start(nodelog)]),
 %   nodelog_server:create(?LogDir),
%    io:format("sd_app ~p~n",[application:start(sd_app)]),
 %   io:format("config ~p~n",[application:start(config_app)]),
    {pod_dir,PodDir}=application:get_env([{pod,pod_dir}]),
    CommonR=application:start(common),
    ok=application:start(nodelog),
    nodelog_server:create(?LogDir),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,{"Result start common ",CommonR}),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,{"Result start sd_app ",application:start(sd_app)}),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,{"Result start config_app ",application:start(config_app)}),
    nodelog_server:log(notice,?MODULE_STRING,?LINE,"server successfully started"),

    {ok, #state{pod_dir=PodDir,
	       appls=[]}
    }.

%% --------------------------------------------------------------------
%% Function: handle_call/3
%% Description: Handling call messages
%% Returns: {reply, Reply, State}          |
%%          {reply, Reply, State, Timeout} |
%%          {noreply, State}               |
%%          {noreply, State, Timeout}      |
%%          {stop, Reason, Reply, State}   | (terminate/2 is called)
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------

handle_call({load_start_appl,ApplId,ApplVsn},_From, State) ->
    Reply=case pod_lib:load_start(ApplId,ApplVsn,State#state.pod_dir) of
	      {error,Reason}->
		  NewState=State, 
		  {error,Reason};
	      {ok,ApplDir}->
		  NewState=State#state{appls=[{ApplId,ApplVsn,ApplDir,date(),time()}|State#state.appls]},
		 ok
	  end,
    {reply, Reply, NewState};

handle_call({stop_unload_appl,ApplId,ApplVsn},_From, State) ->
    Reply=case lists:keyfind(ApplId,1,State#state.appls) of
	      false->
		  NewState=State,
		  {error,[eexists,ApplId,ApplVsn]};
	      {ApplId,_ApplVsn,ApplDir,_,_}->
		  pod_lib:stop_unload(ApplId,ApplDir),
		  NewState=State#state{appls=lists:keydelete(ApplId,1,State#state.appls)},
		  ok
	  end,
    {reply, Reply, NewState};


handle_call({ping},_From, State) ->
    Reply=pong,
    {reply, Reply, State};

handle_call({stopped},_From, State) ->
    Reply=ok,
    {reply, Reply, State};


handle_call({not_implemented},_From, State) ->
    Reply=not_implemented,
    {reply, Reply, State};

handle_call({stop}, _From, State) ->
    {stop, normal, shutdown_ok, State};

handle_call(Request, From, State) ->
    %rpc:cast(node(),log,log,[?Log_ticket("unmatched call",[Request, From])]),
    Reply = {ticket,"unmatched call",Request, From},
    {reply, Reply, State}.

%% --------------------------------------------------------------------
%% Function: handle_cast/2
%% Description: Handling cast messages
%% Returns: {noreply, State}          |
%%          {noreply, State, Timeout} |
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------


handle_cast(_Msg, State) ->
  %  rpc:cast(node(),log,log,[?Log_ticket("unmatched cast",[Msg])]),
    {noreply, State}.

%% --------------------------------------------------------------------
%% Function: handle_info/2
%% Description: Handling all non call/cast messages
%% Returns: {noreply, State}          |
%%          {noreply, State, Timeout} |
%%          {stop, Reason, State}            (terminate/2 is called)
%% --------------------------------------------------------------------
handle_info(_Info, State) ->
    %rpc:cast(node(),log,log,[?Log_ticket("unmatched info",[Info])]),
    {noreply, State}.

%% --------------------------------------------------------------------
%% Function: terminate/2
%% Description: Shutdown the server
%% Returns: any (ignored by gen_server)
%% --------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.

%% --------------------------------------------------------------------
%% Func: code_change/3
%% Purpose: Convert process state when code is changed
%% Returns: {ok, NewState}
%% --------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%% --------------------------------------------------------------------
%%% Internal functions
%% --------------------------------------------------------------------

		  
